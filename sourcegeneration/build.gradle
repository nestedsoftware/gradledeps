import org.gradle.work.Incremental
import org.gradle.work.InputChanges

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    annotationProcessor 'com.generators:interfacegenerator:0.0.1'
    compileOnly 'com.generators:interfacegenerator:0.0.1'
}

compileJava {
    dependsOn("generateSources")
    options.compilerArgs = ['-proc:none']

//    doLast {
//        println("classpath = $classpath")
//        source.forEach({ println("source = $it")})
//
//
//        println "destinationDir = $destinationDir"
//        println("options.compilerArgs = ${options.compilerArgs}")
//        println("options.annotationProcessorPath = ${options.annotationProcessorPath}" )
//        println("options.annotationProcessorGeneratedSourcesDirectory = ${options.annotationProcessorGeneratedSourcesDirectory}")
//        println("project.sourceSets.main.allJava.srcDirs = ${project.sourceSets.main.allJava.srcDirs}")
//    }
}

task generateSources(type: JavaCompile) {
    options.compilerArgs = ['-proc:only']

    //better way to do this?
    source = compileJava.source
    classpath = compileJava.classpath
    destinationDir = compileJava.destinationDir
    options.annotationProcessorPath = compileJava.options.annotationProcessorPath

    //hacky
    options.annotationProcessorGeneratedSourcesDirectory = project.sourceSets.main.allJava.srcDirs[0]
}


abstract class IncrementalReverseTask extends DefaultTask {
    @Incremental
    @PathSensitive(PathSensitivity.NAME_ONLY)
    @InputFiles
    abstract ConfigurableFileCollection  getInputFiles()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @Input
    abstract Property<String> getInputProperty()

    @TaskAction
    void execute(InputChanges inputChanges) {
        println(inputChanges.incremental
                ? 'Executing incrementally'
                : 'Executing non-incrementally'
        )

        inputChanges.getFileChanges(inputFiles).each { change ->
            if (change.fileType == FileType.DIRECTORY) return

            println "${change.changeType}: ${change.normalizedPath}"
            def targetFile = outputDir.file(change.normalizedPath).get().asFile
            if (change.changeType == ChangeType.REMOVED) {
                targetFile.delete()
            } else {
                targetFile.text = change.file.text.reverse()
            }
        }
    }
}

task incrementalReverse(type: IncrementalReverseTask) {
    inputFiles.from(fileTree(dir: 'inputs', include: '*.txt'))
    outputDir = file("$buildDir/outputs")
    inputProperty = project.properties['taskInputProperty'] ?: 'original'
}
